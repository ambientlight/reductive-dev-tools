// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_types = require("bs-platform/lib/js/js_types.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");

var create = (
    function(key){ return Symbol(key) }
  );

function setValue(obj, symbol, value) {
  Object.defineProperty(obj, symbol, {
        value: value,
        writable: false
      });
  return /* () */0;
}

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -976932971,
    "Symbol(ReductiveDevToolsBsList)"
  ],
  /* tuple */[
    -205812214,
    "Symbol(BsPolyVar)"
  ],
  /* tuple */[
    531017570,
    "Symbol(BsRecord)"
  ],
  /* tuple */[
    653843305,
    "Symbol(ReductiveDevToolsBsLabeledVariant)"
  ],
  /* tuple */[
    1041874580,
    "Symbol(BsVariant)"
  ]
];

function debugSymbolToJs(param) {
  return Js_mapperRt.binarySearch(5, param, jsMapperConstantArray);
}

function debugSymbolFromJs(param) {
  return Js_mapperRt.revSearch(5, jsMapperConstantArray, param);
}

function _processSymbols(symbols) {
  var extractedSymbols = $$Array.mapi((function (idx, symbol) {
          return /* tuple */[
                  idx,
                  "" + (String(symbol) + "")
                ];
        }), symbols);
  $$Array.sort((function (param, param$1) {
          return Caml_primitive.caml_string_compare(param[1], param$1[1]);
        }), extractedSymbols);
  return $$Array.map((function (param) {
                return /* tuple */[
                        param[0],
                        Belt_Option.getExn(param[1])
                      ];
              }), Belt_Array.keep($$Array.map((function (param) {
                        return /* tuple */[
                                param[0],
                                Js_mapperRt.revSearch(5, jsMapperConstantArray, param[1])
                              ];
                      }), extractedSymbols), (function (param) {
                    return Belt_Option.isSome(param[1]);
                  })));
}

function _serializeRecord(obj, symbol, baseObject) {
  var keys = obj[symbol];
  var serialized = Belt_Array.reduceWithIndex(Object.keys(obj), Object.assign({ }, baseObject), (function (target, key, idx) {
          var value = obj[key];
          var namedKey = Belt_Array.get(keys, idx);
          var match = Belt_Option.isSome(namedKey);
          target[match ? Belt_Option.getExn(namedKey) : key] = serializeObject(value);
          return target;
        }));
  setValue(serialized, symbol, keys);
  return serialized;
}

function serializeObject(obj) {
  var symbols = Object.getOwnPropertySymbols(obj);
  var extractedSymbols = _processSymbols(symbols);
  var firstSymbol = Belt_Array.get(extractedSymbols, 0);
  var shouldParseListToArray = Belt_Option.getWithDefault(Belt_Option.map(Belt_Array.get(Belt_Array.keep(extractedSymbols, (function (param) {
                      return param[1] === /* DevToolsBsList */-976932971;
                    })), 0), (function (param) {
              return obj[Caml_array.caml_array_get(symbols, param[0])];
            })), false);
  var match = Js_types.classify(obj);
  if (typeof match === "number" || match.tag !== 3) {
    return obj;
  } else {
    var obj$1 = match[0];
    var exit = 0;
    if (firstSymbol !== undefined) {
      var match$1 = firstSymbol;
      if (match$1[1] !== 531017570 || !Array.isArray(obj$1)) {
        exit = 1;
      } else {
        return _serializeRecord(obj$1, Caml_array.caml_array_get(symbols, match$1[0]), { });
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (Array.isArray(obj$1)) {
        var array = shouldParseListToArray ? $$Array.of_list(obj$1) : obj$1;
        return $$Array.map(serializeObject, array);
      } else if (Array.isArray(obj$1)) {
        return obj;
      } else {
        return Js_dict.map(serializeObject, obj$1);
      }
    }
    
  }
}

function _serializeUserTaggedAction(obj, symbol, variantName, isPolyVar) {
  var variantUserMeta = obj[symbol];
  var variantKeys = Belt_Option.getWithDefault(Caml_option.undefined_to_opt(variantUserMeta.keys), /* array */[]);
  var actionType = Belt_Option.getWithDefault(Caml_option.undefined_to_opt(variantUserMeta.actionName), variantName);
  var serialized = Belt_Array.reduceWithIndex(Belt_Array.keep(Object.keys(obj), (function (key) {
              if (isPolyVar) {
                return key !== "0";
              } else {
                return true;
              }
            })), Object.assign({ }, {
            type: actionType
          }), (function (target, key, idx) {
          var value = obj[key];
          var variantKey = Belt_Array.get(variantKeys, idx);
          var match = Belt_Option.isSome(variantKey);
          target[match ? Belt_Option.getExn(variantKey) : key] = serializeObject(value);
          return target;
        }));
  var serialized$1 = isPolyVar ? Object.assign(serialized, {
          __polyVarTag: obj["0"]
        }) : serialized;
  setValue(serialized$1, symbol, variantUserMeta);
  return serialized$1;
}

function serializeAction(obj) {
  var symbols = Object.getOwnPropertySymbols(obj);
  var extractedSymbols = _processSymbols(symbols);
  var additionalMetaSymbol = Belt_Array.get(Belt_Array.keep(extractedSymbols, (function (param) {
              return param[1] === /* DevToolsBsLabeledVariant */653843305;
            })), 0);
  var baseActionType = Belt_Option.getWithDefault(Belt_Option.flatMap(additionalMetaSymbol, (function (param) {
              var metaSymbol = Caml_array.caml_array_get(symbols, param[0]);
              var userMeta = obj[metaSymbol];
              return Caml_option.undefined_to_opt(userMeta.actionName);
            })), "update");
  var firstSymbol = Belt_Array.get(extractedSymbols, 0);
  var exit = 0;
  if (firstSymbol !== undefined) {
    var match = firstSymbol;
    var debugSymbol = match[1];
    var idx = match[0];
    var exit$1 = 0;
    if (debugSymbol !== -205812214) {
      if (debugSymbol !== 531017570) {
        if (debugSymbol !== 1041874580) {
          exit = 1;
        } else {
          exit$1 = 2;
        }
      } else if (Array.isArray(obj)) {
        return _serializeRecord(obj, Caml_array.caml_array_get(symbols, idx), {
                    type: baseActionType
                  });
      } else {
        exit = 1;
      }
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      if (Array.isArray(obj)) {
        var symbol = Caml_array.caml_array_get(symbols, idx);
        var variantName = obj[symbol];
        var serialized;
        if (additionalMetaSymbol !== undefined) {
          var metaSymbol = Caml_array.caml_array_get(symbols, additionalMetaSymbol[0]);
          serialized = _serializeUserTaggedAction(obj, metaSymbol, variantName, debugSymbol === /* BsPolyVar */-205812214);
        } else {
          serialized = Object.assign(Object.assign({ }, $$Array.map(serializeObject, obj)), {
                type: variantName
              });
        }
        setValue(serialized, symbol, variantName);
        return serialized;
      } else {
        exit = 1;
      }
    }
    
  } else {
    exit = 1;
  }
  if (exit === 1) {
    return Object.assign({ }, {
                type: baseActionType,
                __rawValue: serializeObject(obj)
              });
  }
  
}

function tagList(list) {
  setValue(list, Curry._1(create, "ReductiveDevToolsBsList"), true);
  return list;
}

function tagVariant(variant, keys, actionName, param) {
  var tmp = { };
  if (keys !== undefined) {
    tmp.keys = Caml_option.valFromOption(keys);
  }
  if (actionName !== undefined) {
    tmp.actionName = Caml_option.valFromOption(actionName);
  }
  setValue(variant, Curry._1(create, "ReductiveDevToolsBsLabeledVariant"), tmp);
  return variant;
}

var Serializer = [
  debugSymbolToJs,
  debugSymbolFromJs,
  serializeAction
];

exports.Serializer = Serializer;
exports.tagList = tagList;
exports.tagVariant = tagVariant;
/* create Not a pure module */
