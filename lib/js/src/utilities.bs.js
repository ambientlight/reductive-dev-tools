// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_types = require("bs-platform/lib/js/js_types.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function unwrap(opt, exc) {
  if (opt !== undefined) {
    return Caml_option.valFromOption(opt);
  } else {
    throw exc;
  }
}

var create = (
    function(key){ return Symbol(key) }
  );

function setValue(obj, symbol, value) {
  Object.defineProperty(obj, symbol, {
        value: value,
        writable: false
      });
  return /* () */0;
}

var UnexpectedSerializedVariantKey = Caml_exceptions.create("Utilities-ReductiveDevTools.Serializer.Exceptions.UnexpectedSerializedVariantKey");

var PolyVarTagNotPresentWhileExpected = Caml_exceptions.create("Utilities-ReductiveDevTools.Serializer.Exceptions.PolyVarTagNotPresentWhileExpected");

var UnexpectedActionType = Caml_exceptions.create("Utilities-ReductiveDevTools.Serializer.Exceptions.UnexpectedActionType");

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -205812214,
    "Symbol(BsPolyVar)"
  ],
  /* tuple */[
    531017570,
    "Symbol(BsRecord)"
  ],
  /* tuple */[
    653843305,
    "Symbol(ReductiveDevToolsBsLabeledVariant)"
  ],
  /* tuple */[
    1041874580,
    "Symbol(BsVariant)"
  ]
];

function ofReasonAction(action) {
  var symbols = Object.getOwnPropertySymbols(action);
  var extractedSymbols = $$Array.mapi((function (idx, symbol) {
          return /* tuple */[
                  idx,
                  "" + (String(symbol) + "")
                ];
        }), symbols);
  $$Array.sort((function (param, param$1) {
          return Caml_primitive.caml_string_compare(param[1], param$1[1]);
        }), extractedSymbols);
  return $$Array.map((function (param) {
                return /* tuple */[
                        param[0],
                        Belt_Option.getExn(param[1])
                      ];
              }), Belt_Array.keep($$Array.map((function (param) {
                        return /* tuple */[
                                param[0],
                                Js_mapperRt.revSearch(4, jsMapperConstantArray, param[1])
                              ];
                      }), extractedSymbols), (function (param) {
                    return Belt_Option.isSome(param[1]);
                  })));
}

function symbolValue(action, debugSymbol) {
  return Belt_Option.map(Belt_Array.get(Belt_Array.keep(ofReasonAction(action), (function (param) {
                        return param[1] === debugSymbol;
                      })), 0), (function (param) {
                var symbol = Caml_array.caml_array_get(Object.getOwnPropertySymbols(action), param[0]);
                return action[symbol];
              }));
}

var jsMapperConstantArray$1 = /* array */[
  /* tuple */[
    -1027084226,
    "VariantC"
  ],
  /* tuple */[
    -88365048,
    "PolyVarC"
  ],
  /* tuple */[
    4099528,
    "Raw"
  ],
  /* tuple */[
    847309489,
    "Record"
  ]
];

function tToJs(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray$1);
}

function tFromJs(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray$1, param);
}

function fromReasonAction(action) {
  var match = Belt_Array.get(ofReasonAction(action), 0);
  if (match !== undefined) {
    var match$1 = match[1];
    if (match$1 !== -205812214) {
      if (match$1 !== 531017570) {
        if (match$1 !== 1041874580) {
          return /* Raw */4099528;
        } else {
          return /* VariantC */-1027084226;
        }
      } else if (Array.isArray(action)) {
        return /* Record */847309489;
      } else {
        return /* Raw */4099528;
      }
    } else {
      return /* PolyVarC */-88365048;
    }
  } else {
    return /* Raw */4099528;
  }
}

var Type = /* module */Block.localModule([
    "tToJs",
    "tFromJs",
    "fromReasonAction"
  ], [
    tToJs,
    tFromJs,
    fromReasonAction
  ]);

function fromReasonAction$1(action) {
  var actionType = fromReasonAction(action);
  var userMeta = symbolValue(action, /* DevToolsBsLabeledVariant */653843305);
  if (actionType >= 4099528) {
    if (actionType >= 847309489) {
      var tmp = {
        kind: Js_mapperRt.binarySearch(4, actionType, jsMapperConstantArray$1)
      };
      var tmp$1 = symbolValue(action, /* BsRecord */531017570);
      if (tmp$1 !== undefined) {
        tmp.recordKeys = Caml_option.valFromOption(tmp$1);
      }
      return tmp;
    } else {
      var tmp$2 = {
        kind: Js_mapperRt.binarySearch(4, actionType, jsMapperConstantArray$1),
        rawValue: action
      };
      if (userMeta !== undefined) {
        tmp$2.userMeta = Caml_option.valFromOption(userMeta);
      }
      return tmp$2;
    }
  } else if (actionType >= -88365048) {
    var tmp$3 = {
      kind: Js_mapperRt.binarySearch(4, actionType, jsMapperConstantArray$1)
    };
    var tmp$4 = Belt_Array.get(action, 0);
    if (tmp$4 !== undefined) {
      tmp$3.polyVarTag = Caml_option.valFromOption(tmp$4);
    }
    var tmp$5 = Js_dict.get(action, "tag");
    if (tmp$5 !== undefined) {
      tmp$3.tag = Caml_option.valFromOption(tmp$5);
    }
    if (userMeta !== undefined) {
      tmp$3.userMeta = Caml_option.valFromOption(userMeta);
    }
    return tmp$3;
  } else {
    var tmp$6 = {
      kind: Js_mapperRt.binarySearch(4, actionType, jsMapperConstantArray$1)
    };
    var tmp$7 = Js_dict.get(action, "tag");
    if (tmp$7 !== undefined) {
      tmp$6.tag = Caml_option.valFromOption(tmp$7);
    }
    if (userMeta !== undefined) {
      tmp$6.userMeta = Caml_option.valFromOption(userMeta);
    }
    return tmp$6;
  }
}

function _actionName(action, internals) {
  var userMetaName = Belt_Option.flatMap(Caml_option.undefined_to_opt(internals.userMeta), (function (userMeta) {
          return Caml_option.undefined_to_opt(userMeta.actionName);
        }));
  var actionType = fromReasonAction(action);
  if (userMetaName !== undefined) {
    return userMetaName;
  } else if (actionType !== -1027084226) {
    if (actionType !== -88365048) {
      return "update";
    } else {
      return Belt_Option.getWithDefault(symbolValue(action, /* BsPolyVar */-205812214), "update");
    }
  } else {
    return Belt_Option.getWithDefault(symbolValue(action, /* BsVariant */1041874580), "update");
  }
}

function serializeObject(obj) {
  var isList = Belt_Option.map(symbolValue(obj, /* BsVariant */1041874580), (function (variantName) {
          return variantName === "::";
        }));
  var recordKeys = symbolValue(obj, /* BsRecord */531017570);
  var tmp = {
    kind: Js_mapperRt.binarySearch(4, /* Raw */4099528, jsMapperConstantArray$1)
  };
  if (recordKeys !== undefined) {
    tmp.recordKeys = Caml_option.valFromOption(recordKeys);
  }
  if (isList !== undefined) {
    tmp.isList = Caml_option.valFromOption(isList);
  }
  var base = {
    __internal: tmp
  };
  var match = Js_types.classify(obj);
  var match$1 = fromReasonAction(obj);
  var serialized;
  if (typeof match === "number" || match.tag !== 3) {
    serialized = obj;
  } else {
    var obj$1 = match[0];
    if (match$1 !== 847309489) {
      if (Array.isArray(obj$1)) {
        var match$2 = Belt_Option.getWithDefault(isList, false);
        var array = match$2 ? $$Array.of_list(obj$1) : obj$1;
        serialized = $$Array.map(serializeObject, array);
      } else {
        serialized = Array.isArray(obj$1) ? obj : Js_dict.map(serializeObject, obj$1);
      }
    } else {
      serialized = _serializeRecordToDict(obj$1);
    }
  }
  var match$3 = Js_types.classify(serialized);
  if (typeof match$3 === "number" || match$3.tag !== 3) {
    return serialized;
  } else {
    return Object.assign(base, match$3[0]);
  }
}

function _serializeRecordToDict(obj) {
  var keys = symbolValue(obj, /* BsRecord */531017570);
  if (keys !== undefined) {
    var keys$1 = Caml_option.valFromOption(keys);
    return Belt_Array.reduceWithIndex(obj, { }, (function (target, value, idx) {
                  var key = Belt_Array.get(keys$1, idx);
                  target[Belt_Option.getWithDefault(key, String(idx))] = serializeObject(value);
                  return target;
                }));
  } else {
    return Object.assign({ }, $$Array.map(serializeObject, obj));
  }
}

function _serializeVariantToDict(action, isPolyVar) {
  var keys = Belt_Option.flatMap(symbolValue(action, /* DevToolsBsLabeledVariant */653843305), (function (meta) {
          return Caml_option.undefined_to_opt(meta.keys);
        }));
  if (keys !== undefined) {
    var keys$1 = keys;
    return Belt_Array.reduceWithIndex(isPolyVar ? Caml_array.caml_array_get(action, 1) : action, { }, (function (target, value, idx) {
                  var variantKey = Belt_Array.get(keys$1, idx);
                  target[Belt_Option.getWithDefault(variantKey, String(idx))] = serializeObject(value);
                  return target;
                }));
  } else {
    return Object.assign({ }, $$Array.map(serializeObject, action));
  }
}

function deserializeObject(obj) {
  var isList = Belt_Option.getWithDefault(Belt_Option.flatMap(Caml_option.undefined_to_opt(obj.__internal), (function (prim) {
              return Caml_option.undefined_to_opt(prim.isList);
            })), false);
  var recordKeys = Belt_Option.flatMap(Caml_option.undefined_to_opt(obj.__internal), (function (prim) {
          return Caml_option.undefined_to_opt(prim.recordKeys);
        }));
  var match = Js_types.classify(obj);
  if (typeof match === "number" || match.tag !== 3) {
    return obj;
  } else {
    var _objectValue = match[0];
    if (recordKeys !== undefined) {
      return _deserializeRecord(obj);
    } else {
      var deserialized = $$Array.map((function (key) {
              return deserializeObject(_objectValue[key]);
            }), Belt_Array.keep(Object.keys(_objectValue), (function (key) {
                  return key !== "__internal";
                })));
      var deserialized$1 = isList ? $$Array.to_list(deserialized) : deserialized;
      if (isList) {
        setValue(deserialized$1, Curry._1(create, "BsVariant"), "::");
      }
      return deserialized$1;
    }
  }
}

function _deserializeRecord(obj) {
  var recordKeys = Belt_Option.flatMap(Caml_option.undefined_to_opt(obj.__internal), (function (prim) {
          return Caml_option.undefined_to_opt(prim.recordKeys);
        }));
  var deserialized = $$Array.map((function (key) {
          return deserializeObject(obj[key]);
        }), Belt_Array.keep(Object.keys(obj), (function (key) {
              return key !== "__internal";
            })));
  if (recordKeys !== undefined) {
    setValue(deserialized, Curry._1(create, "BsRecord"), recordKeys);
  }
  return deserialized;
}

function serializeAction(action) {
  var action$1 = action;
  var internal = fromReasonAction$1(action$1);
  var actionName = _actionName(action$1, internal);
  var base = {
    type: actionName,
    __internal: internal
  };
  var match = fromReasonAction(action$1);
  if (match >= 4099528) {
    if (match >= 847309489) {
      return Object.assign(base, _serializeRecordToDict(action$1));
    } else {
      return base;
    }
  } else if (match >= -88365048) {
    return Object.assign(base, _serializeVariantToDict(action$1, true));
  } else {
    return Object.assign(base, _serializeVariantToDict(action$1, false));
  }
}

var serializeObject$1 = serializeObject;

function deserializeAction(action) {
  var action$1 = action;
  var internal = action$1.__internal;
  var param = internal.kind;
  var actionType = Belt_Option.getWithDefault(Js_mapperRt.revSearch(4, jsMapperConstantArray$1, param), /* Raw */4099528);
  if (actionType !== 4099528) {
    if (actionType >= 847309489) {
      return _deserializeRecord(action$1);
    } else {
      var action$2 = action$1;
      var actionType$1 = actionType;
      var internal$1 = action$2.__internal;
      var keys = Belt_Option.flatMap(Caml_option.undefined_to_opt(internal$1.userMeta), (function (userMeta) {
              return Caml_option.undefined_to_opt(userMeta.keys);
            }));
      var varTag = internal$1.tag;
      var polyVarTag = internal$1.polyVarTag;
      var deserialized;
      if (keys !== undefined) {
        var keys$1 = keys;
        deserialized = $$Array.fold_left((function (deserialized, key) {
                var idx = keys$1.findIndex((function (entity) {
                        return entity === key;
                      }));
                if (idx === -1) {
                  throw [
                        UnexpectedSerializedVariantKey,
                        "Serialized variant key(" + (String(key) + ") corresponding array idx has not been found.")
                      ];
                } else {
                  Caml_array.caml_array_set(deserialized, idx, action$2[key]);
                }
                return deserialized;
              }), new Array(keys$1.length), Belt_Array.keep(Object.keys(action$2), (function (key) {
                    if (key !== "__internal") {
                      return key !== "type";
                    } else {
                      return false;
                    }
                  })));
      } else {
        deserialized = $$Array.map((function (key) {
                return deserializeObject(action$2[key]);
              }), Belt_Array.keep(Object.keys(action$2), (function (key) {
                    if (key !== "__internal") {
                      return key !== "type";
                    } else {
                      return false;
                    }
                  })));
      }
      var actionTypeStr = Js_mapperRt.binarySearch(4, actionType$1, jsMapperConstantArray$1);
      if (actionType$1 !== -1027084226) {
        if (actionType$1 !== -88365048) {
          throw [
                UnexpectedActionType,
                "" + (String(actionTypeStr) + "")
              ];
        } else {
          var polyVarTag$1 = unwrap(polyVarTag === undefined ? undefined : Caml_option.some(polyVarTag), [
                PolyVarTagNotPresentWhileExpected,
                "PolyVar tag not present while expected"
              ]);
          var deserialized$1;
          if (keys !== undefined) {
            var deserialized$2 = /* array */[
              polyVarTag$1,
              deserialized
            ];
            setValue(deserialized$2, Curry._1(create, "ReductiveDevToolsBsLabeledVariant"), Caml_option.undefined_to_opt(internal$1.userMeta));
            deserialized$1 = deserialized$2;
          } else {
            Caml_array.caml_array_set(deserialized, 0, polyVarTag$1);
            deserialized$1 = deserialized;
          }
          setValue(deserialized$1, Curry._1(create, "BsPolyVar"), action$2.type);
          return deserialized$1;
        }
      } else {
        setValue(deserialized, Curry._1(create, "BsVariant"), action$2.type);
        if (varTag !== undefined) {
          deserialized["tag"] = varTag;
          return deserialized;
        } else {
          return deserialized;
        }
      }
    }
  } else {
    return Belt_Option.getExn(Caml_option.undefined_to_opt(internal.rawValue));
  }
}

var deserializeObject$1 = deserializeObject;

function labelVariant(variant, keys) {
  setValue(variant, Curry._1(create, "ReductiveDevToolsBsLabeledVariant"), {
        keys: keys
      });
  return variant;
}

function tagVariant(variant, name) {
  setValue(variant, Curry._1(create, "BsVariant"), name);
  return variant;
}

function tagList(list) {
  return tagVariant(list, "::");
}

function tagPolyVar(polyVar, name) {
  setValue(polyVar, Curry._1(create, "BsPolyVar"), name);
  return polyVar;
}

function tagRecord(obj, keys) {
  setValue(obj, Curry._1(create, "BsRecord"), keys);
  return obj;
}

function parse(prim) {
  return JSON.parse(prim);
}

var Serializer_000 = [
  Type,
  [],
  []
];

var Serializer = [
  Serializer_000,
  serializeAction,
  serializeObject$1,
  deserializeAction,
  deserializeObject$1
];

exports.unwrap = unwrap;
exports.parse = parse;
exports.Serializer = Serializer;
exports.labelVariant = labelVariant;
exports.tagList = tagList;
exports.tagVariant = tagVariant;
exports.tagPolyVar = tagPolyVar;
exports.tagRecord = tagRecord;
/* create Not a pure module */
