// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReduxDevtoolsExtension = require("redux-devtools-extension");

var devToolsEnhancer = ReduxDevtoolsExtension.devToolsEnhancer;

function connect(extension, options) {
  return extension.connect(options);
}

function disconnect(extension) {
  extension.disconnect();
  return /* () */0;
}

function listen(extension, onMessage, instanceId) {
  extension.listen(onMessage, instanceId);
  return /* () */0;
}

function open_(extension, position, param) {
  extension.open(position !== undefined ? Caml_option.valFromOption(position) : undefined);
  return /* () */0;
}

function notifyErrors(onError, param) {
  onError.notifyErrors();
  return /* () */0;
}

function subscribe(connection, listener) {
  return connection.subscribe(listener);
}

function unsubscribe(connection) {
  connection.unsubscribe();
  return /* () */0;
}

function send(connection, action, state) {
  connection.send(action, state);
  return /* () */0;
}

function init(connection, state) {
  connection.init(state);
  return /* () */0;
}

function error(connection, message) {
  connection.error(message);
  return /* () */0;
}

var LiftedStateAction = /* module */Block.localModule([], []);

var ComputedState = /* module */Block.localModule([], []);

var LiftedState = /* module */Block.localModule([], []);

var ActionPayload = /* module */Block.localModule([], []);

var Action = /* module */Block.localModule([], []);

var Monitor = /* module */Block.localModule([
    "LiftedStateAction",
    "ComputedState",
    "LiftedState",
    "ActionPayload",
    "Action"
  ], [
    LiftedStateAction,
    ComputedState,
    LiftedState,
    ActionPayload,
    Action
  ]);

exports.devToolsEnhancer = devToolsEnhancer;
exports.connect = connect;
exports.disconnect = disconnect;
exports.listen = listen;
exports.open_ = open_;
exports.notifyErrors = notifyErrors;
exports.subscribe = subscribe;
exports.unsubscribe = unsubscribe;
exports.send = send;
exports.init = init;
exports.error = error;
exports.Monitor = Monitor;
/* devToolsEnhancer Not a pure module */
